registration view:
keep track of most recently clicked period length button. if you click the same one *add* another increment of the value instead of replace.
Thus: clicking the day button 3 times in a row ends up with the time for 3 days

Notifyee, (fail-over/escalation notifyee), optional @mention, priority-expression,
separate table:
	blackout periods
		registry id, period count (which will be decremented each period)

blackout/pause feature in deadmansnitch

preferred notification/RE-notification timing: IMMEDIATE, morning, afternoon, evening, night
							daylight hours, after dark, work hours, graveyard shift, 
	essentially, just impacts the cool off period, round "up" to next block of hours that corresponds.
	should this be a range, actually? and the above are just "ui-side presets"?

svg datauri of heartbeat ekg line for icon, embed.

registry view enhancements: 
	- client-side fancification and styling, color code status, etc
	- a copy-to-clipboard button for a crontab entry featuring that specific line
 
bonus suggested code block:
	a cronjob that does a simple status check on the heartbeatmonitor service itself, and alerts if not ACK/OK
	perhaps also an optional SMTP outgoing functionality check:  dedicate a mailbox to heartbeat monitor. It will send itself an email once a day, and check the inbox 15 minutes later to be sure SMTP isn't block or anything.

 create table registration(
        ID                      INT PRIMARY KEY NOT NULL,
        NAME                    TEXT            NOT NULL,
        PERIOD                  INT             NOT NULL,
        LAST_SIGNAL_DATE        DATE
);


utc internally, perhaps, but have an option to display in localtime. or timezone of your choosing, even? might rquire cookies and so on.


monitor thread enhancement: 
	don't immediately process flatlines for brand-new registrations. So have a filtering exception. Or else, new registrations should be created *WITH* a default blackout for the first hour of its life.

new alert channel
	type
	address/id/number/target/path/url
	payload template (in cases like teams or RESTful call)
	escalation channel (link back to self)

new monitor
	Name
		suggested names: environment.hostname.jobtaskscript
				also gives you a special URL for each job you want monitored. Use curl or your browser to make a request to this URL to start snitching.
	Interval (or "normal periodicity" of check-in, i.e., allowable time between heartbeats before reaction)
	Alert channels
		checkboxes
	permissable misses (before alerting or escalating), default 0

service status
	yyyymmddhhmiss of last processing cycle without error

confirm/heartbeat page
	callable with query params, but also just downloadable scriptlets
	
maybe make bottle logging (to console) datestamp format more yyyymmddHHMMss-ish


optional automatic backup of the db, perhaps rsync
"export" is just downloading registry, as long as we are sure we have every column in the output

https://foo.heartbeat.sh/


#short-hash-altID-code-things:
having let the following run for pretty good while, no duplicates were found, so maybe an ok way to create short, non-duplicating IDs (instead of just serial number)
 while [ 1 = 1 ] ; do sleep 1 ;  ( date "+%s" > /tmp/unixtime.txt ; crc32 /tmp/unixtime.txt ) >> /tmp/stampcollection.txt ; done
 sort /tmp/stampcollection.txt | uniq -d 




#mov initialize_db.sql into image:/db/
cat initialize_db.sql | sqlite3 /db/heartbeat_monitor.db

apt-get install vim.tiny python3
apt-get install python3-flask ##TODO noninteractive?

##apt-get install python3-pip
##pip install Flask

export FLASK_APP=/usr/local/src/hb.py ; flask run --host=0.0.0.0
 

